{{- $has_mysql := .Vars.system.mysql.version -}}
{{- $has_redis := .Vars.system.redis.version -}}
{{- $has_mailcatcher := .Vars.system.mailcatcher.version -}}
{{- $has_rabbitmq := .Vars.system.rabbitmq.version -}}

# Relative root dir ("."|".."|"../.."|…)
_ROOT_DIR := $(patsubst ./%,%,$(patsubst %/.manala/Makefile,%,./$(filter %.manala/Makefile,$(MAKEFILE_LIST))))
# Is current dir root ? (""|"1")
_ROOT := $(if $(filter .,$(_ROOT_DIR)),1)
# Relative current dir ("."|"foo"|"foo/bar"|…)
_DIR := $(patsubst ./%,%,.$(patsubst $(realpath $(CURDIR)/$(_ROOT_DIR))%,%,$(CURDIR)))

include $(_ROOT_DIR)/.manala/make/text.mk
include $(_ROOT_DIR)/.manala/make/help.mk
include $(_ROOT_DIR)/.manala/make/os.mk
include $(_ROOT_DIR)/.manala/make/git.mk

.DEFAULT_GOAL := help

user := $(shell id -u)
group := $(shell id -g)

dc := USER_ID=$(user) GROUP_ID=$(group) docker-compose
symfony := symfony
php := $(symfony) php
composer := $(symfony) composer

APP_DOMAINS := {{ .Vars.system.app_name }}
MANDATORY_CONTAINERS := {{- if $has_mysql }} database{{ end }}
                        {{- if $has_redis }} redis{{ end }}
                        {{- if $has_redis }} mailcatcher{{ end }}
                        {{- if $has_rabbitmq }} rabbitmq{{ end }}

HELP += $(call help_section, Environment)

HELP += $(call help,install,             Install the environment)
install:
	$(symfony) server:ca:install
	$(symfony) proxy:start
	echo $(APP_DOMAINS) | xargs $(symfony) proxy:domain:attach

	$(MAKE) up
	$(install)
	@echo
	@$(call message_success, The environment has been successfully installed.)
	@echo

HELP += $(call help,install@integration, Install the environment (integration))
install@integration: export APP_ENV=test
install@integration:
	$(symfony) server:ca:install
	$(MAKE) up
	$(install_integration)
	@echo
	@$(call message_success, The integration environment has been successfully installed.)
	@echo

_symfony_proxy_start:
	$(symfony) proxy:start

_up:
	$(dc) up --detach $(MANDATORY_CONTAINERS)

_start:
	$(dc) start $(MANDATORY_CONTAINERS)

_wait_for_database:
	{{ if $has_mysql -}}
	@$(call message_warning, Waiting for the database to be ready...)
	@until docker inspect -f {{ "{{.State.Health.Status}}" }} `$(dc) ps -q database` | grep -q "healthy"; do \
	  $(call message_warning, Waiting...); \
	  sleep 1; \
	done
	@$(call message_success, The database is ready!)
	{{- end }}

_post_start_success:
	@echo
	@$(call message_success, You can now run the Symfony server)
	@echo

HELP += $(call help,up,                  Update and start the environment)
up: _symfony_proxy_start _up _wait_for_database _post_start_success

HELP += $(call help,start,               Start the environment)
start: _symfony_proxy_start _start _wait_for_database _post_start_success

HELP += $(call help,stop,                Stop the environment)
stop:
	$(dc) stop

HELP += $(call help,down,                Stop and remove the environment)
down: stop
	$(dc) down --volumes
	@echo
	@$(call message_error, ALL CONTAINERS HAVE BEEN DESTROYED)
	@echo

HELP += $(call help_section, Development tools)

{{ if $has_mysql -}}
HELP += $(call help,run-phpmyadmin,    Start a web interface for PhpMyAdmin)
run-phpmyadmin:
	$(dc) up --detach phpmyadmin
	@echo
	@$(call message_success, You can now open http://`$(dc) port phpmyadmin 80` to access PhpMyAdmin)
	@echo
{{- end }}

{{ if $has_redis -}}
HELP += $(call help,run-phpredisadmin, Start a web interface for PhpRedisAdmin)
run-phpredisadmin:
	$(dc) up --detach phpredisadmin
	@echo
	@$(call message_success, You can now open http://`$(dc) port phpredisadmin 80` to access PhpRedisAdmin)
	@echo{{- end }}

{{ if $has_mailcatcher -}}
HELP += $(call help,open-mailcatcher,  Open the web interface for MailCatcher)
open-mailcatcher:
	$(symfony) open:local:webmail
{{- end }}

{{ if $has_rabbitmq -}}
HELP += $(call help,open-rabbitmq,     Open the web interface for RabbitMQ)
open-rabbitmq:
	$(symfony) open:local:rabbitmq
	@$(call message_success, Use \"guest\" as username and \"guest\" as password.)
{{- end }}

HELP += $(call help_section, Project)
